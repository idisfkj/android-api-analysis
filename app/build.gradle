apply plugin: 'com.android.application'

apply plugin: "org.jetbrains.kotlin.android"

//apply plugin: 'kotlin-android-extensions'

apply plugin: 'kotlin-kapt'

apply plugin: "androidx.navigation.safeargs.kotlin"

android {
    defaultConfig {
        applicationId "com.idisfkj.androidapianalysis"
        compileSdk Versions.target_sdk
        minSdkVersion Versions.min_sdk
        targetSdkVersion Versions.target_sdk
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }
    signingConfigs {
        config {
            storeFile file('key.store')
            keyAlias 'android'
            keyPassword 'android123'
            storePassword 'android123'
        }
    }

    buildFeatures {
        compose true
        viewBinding true
    }

    dataBinding {
        enabled true
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    composeOptions {
        kotlinCompilerExtensionVersion '1.5.5'
    }

    kotlinOptions {
        jvmTarget = "1.8"
    }

    buildTypes {
        debug {
            minifyEnabled false
            zipAlignEnabled false
            shrinkResources false
            signingConfig signingConfigs.config
        }
        outer {
            minifyEnabled false
            zipAlignEnabled false
            shrinkResources false
            signingConfig signingConfigs.config
        }
        release {
            minifyEnabled true
            zipAlignEnabled true
            shrinkResources true
            signingConfig signingConfigs.config
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    //组合多个产品风格与纬度
    flavorDimensions "mode", "api"
    productFlavors {
        dev {
            applicationIdSuffix ".dev"
            dimension "mode"
            manifestPlaceholders = [PROJECT_NAME: "@string/app_name_dev",
                                    APP_ID      : "21321843"]
            buildConfigField 'String', 'API_URL', '"https://dev.idisfkj.android.com"'
            buildConfigField 'String', 'APP_KEY', '"3824yk32"'
        }
        prod {
            applicationIdSuffix ".prod"
            dimension "mode"
            manifestPlaceholders = [PROJECT_NAME: "@string/app_name",
                                    APP_ID      : "12932843"]
            buildConfigField 'String', 'API_URL', '"https://prod.idisfkj.android.com"'
            buildConfigField 'String', 'APP_KEY', '"32143dsk2"'
        }
        minApi16 {
            dimension "api"
            minSdkVersion 16
            versionCode 10000 + android.defaultConfig.versionCode
            versionNameSuffix "-minApi16"
        }
        minApi21 {
            dimension "api"
            minSdkVersion 21
            versionCode 20000 + android.defaultConfig.versionCode
            versionNameSuffix "-minApi21"
        }
    }

    android.applicationVariants.all { variant ->
        if (variant.buildType.name == buildTypes.release.name) {
            variant.outputs.all {
                outputFileName = "analysis-release-${defaultConfig.versionName}.apk"
            }
        }
    }

    // 过滤变体
    variantFilter { variant ->
        def names = variant.flavors*.name
        if (names.contains("minApi16") && names.contains("dev")) {
            setIgnore(true)
        }
    }
//    sourceSets {
//        //设置默认main源集配置
//        main {
//            res.srcDirs = ['src/prodMinApi21Release/res']
//        }
//    }
}

//afterEvaluate {
//    def propsFile = rootProject.file('keystore.properties')
//    def configName = 'config'
//    if (propsFile.exists() && android.signingConfigs.hasProperty(configName)) {
//        def props = new Properties()
//        props.load(new FileInputStream(propsFile))
//        android.signingConfigs[configName].keyPassword = props['keyPassword']
//        android.signingConfigs[configName].storePassword = props['storePassword']
//    }
//}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    // constraint-layout
    implementation Dependencies.constraint_layout
    // kotlin
//    implementation Dependencies.kotlin_stdlib
//    implementation Dependencies.core_ktx
    // architecture component
    kapt Dependencies.lifecycle_compiler
    implementation Dependencies.arch_viewmodel
    implementation Dependencies.arch_livedata
    implementation Dependencies.arch_runtime
    implementation Dependencies.arch_room_runtime
    implementation Dependencies.arch_room
    implementation Dependencies.paging_runtime
    implementation Dependencies.work_runtime
    kapt Dependencies.arch_room_compiler
    // navigation
    implementation Dependencies.nav_fragment
    implementation Dependencies.nav_ui
    // rxjava
    implementation Dependencies.rxjava2
    implementation Dependencies.rx_android
    // retrofit
    implementation Dependencies.retrofit_runtime
    implementation Dependencies.retrofit_gson
    implementation Dependencies.okhttp_logging_interceptor
    implementation Dependencies.retrofit_adapter_rxjava2
    // glide
    implementation Dependencies.glide_runtime
    kapt Dependencies.glide_compiler

    // compose
    implementation Dependencies.compose_runtime
    implementation Dependencies.activity_compose
    implementation Dependencies.material
    implementation Dependencies.animation
    implementation Dependencies.ui_tooling
    implementation Dependencies.lifecycle_viewmode_compose
    implementation Dependencies.constraint_layout_compose
    androidTestImplementation Dependencies.ui_test

    testImplementation Dependencies.junit
    androidTestImplementation Dependencies.runner
    androidTestImplementation Dependencies.espresso_core
}
